// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/experiment.proto

package experiment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExperimentService_RequestResponse_FullMethodName       = "/experiment.ExperimentService/RequestResponse"
	ExperimentService_StreamRequestResponse_FullMethodName = "/experiment.ExperimentService/StreamRequestResponse"
	ExperimentService_PublishEvent_FullMethodName          = "/experiment.ExperimentService/PublishEvent"
	ExperimentService_SubscribeEvents_FullMethodName       = "/experiment.ExperimentService/SubscribeEvents"
)

// ExperimentServiceClient is the client API for ExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Опис сервісу gRPC
type ExperimentServiceClient interface {
	// Синхронний метод запит-відповідь
	RequestResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Асинхронний метод потокової взаємодії (streaming)
	StreamRequestResponse(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error)
	// Метод для публікації (публікація події)
	PublishEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventAck, error)
	// Метод для підписки (передаємо потік подій)
	SubscribeEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
}

type experimentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentServiceClient(cc grpc.ClientConnInterface) ExperimentServiceClient {
	return &experimentServiceClient{cc}
}

func (c *experimentServiceClient) RequestResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ExperimentService_RequestResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StreamRequestResponse(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExperimentService_ServiceDesc.Streams[0], ExperimentService_StreamRequestResponse_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExperimentService_StreamRequestResponseClient = grpc.BidiStreamingClient[Request, Response]

func (c *experimentServiceClient) PublishEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventAck)
	err := c.cc.Invoke(ctx, ExperimentService_PublishEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) SubscribeEvents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExperimentService_ServiceDesc.Streams[1], ExperimentService_SubscribeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExperimentService_SubscribeEventsClient = grpc.ServerStreamingClient[Event]

// ExperimentServiceServer is the server API for ExperimentService service.
// All implementations must embed UnimplementedExperimentServiceServer
// for forward compatibility.
//
// Опис сервісу gRPC
type ExperimentServiceServer interface {
	// Синхронний метод запит-відповідь
	RequestResponse(context.Context, *Request) (*Response, error)
	// Асинхронний метод потокової взаємодії (streaming)
	StreamRequestResponse(grpc.BidiStreamingServer[Request, Response]) error
	// Метод для публікації (публікація події)
	PublishEvent(context.Context, *Event) (*EventAck, error)
	// Метод для підписки (передаємо потік подій)
	SubscribeEvents(*Empty, grpc.ServerStreamingServer[Event]) error
	mustEmbedUnimplementedExperimentServiceServer()
}

// UnimplementedExperimentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExperimentServiceServer struct{}

func (UnimplementedExperimentServiceServer) RequestResponse(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestResponse not implemented")
}
func (UnimplementedExperimentServiceServer) StreamRequestResponse(grpc.BidiStreamingServer[Request, Response]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequestResponse not implemented")
}
func (UnimplementedExperimentServiceServer) PublishEvent(context.Context, *Event) (*EventAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedExperimentServiceServer) SubscribeEvents(*Empty, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedExperimentServiceServer) mustEmbedUnimplementedExperimentServiceServer() {}
func (UnimplementedExperimentServiceServer) testEmbeddedByValue()                           {}

// UnsafeExperimentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperimentServiceServer will
// result in compilation errors.
type UnsafeExperimentServiceServer interface {
	mustEmbedUnimplementedExperimentServiceServer()
}

func RegisterExperimentServiceServer(s grpc.ServiceRegistrar, srv ExperimentServiceServer) {
	// If the following call pancis, it indicates UnimplementedExperimentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExperimentService_ServiceDesc, srv)
}

func _ExperimentService_RequestResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).RequestResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperimentService_RequestResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).RequestResponse(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StreamRequestResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExperimentServiceServer).StreamRequestResponse(&grpc.GenericServerStream[Request, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExperimentService_StreamRequestResponseServer = grpc.BidiStreamingServer[Request, Response]

func _ExperimentService_PublishEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).PublishEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperimentService_PublishEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).PublishEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExperimentServiceServer).SubscribeEvents(m, &grpc.GenericServerStream[Empty, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExperimentService_SubscribeEventsServer = grpc.ServerStreamingServer[Event]

// ExperimentService_ServiceDesc is the grpc.ServiceDesc for ExperimentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperimentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "experiment.ExperimentService",
	HandlerType: (*ExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestResponse",
			Handler:    _ExperimentService_RequestResponse_Handler,
		},
		{
			MethodName: "PublishEvent",
			Handler:    _ExperimentService_PublishEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRequestResponse",
			Handler:       _ExperimentService_StreamRequestResponse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeEvents",
			Handler:       _ExperimentService_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/experiment.proto",
}
