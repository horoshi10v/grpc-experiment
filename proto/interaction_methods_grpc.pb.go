// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: interaction_methods.proto

package interaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SyncAsyncService_SynchronousMethod_FullMethodName  = "/interaction.SyncAsyncService/SynchronousMethod"
	SyncAsyncService_AsynchronousMethod_FullMethodName = "/interaction.SyncAsyncService/AsynchronousMethod"
)

// SyncAsyncServiceClient is the client API for SyncAsyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервіс для методів синхронної та асинхронної взаємодії
type SyncAsyncServiceClient interface {
	// Синхронний метод запит-відповідь
	SynchronousMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Асинхронний метод запит-відповідь (емуляція асинхронності)
	AsynchronousMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AsyncResponse, error)
}

type syncAsyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncAsyncServiceClient(cc grpc.ClientConnInterface) SyncAsyncServiceClient {
	return &syncAsyncServiceClient{cc}
}

func (c *syncAsyncServiceClient) SynchronousMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SyncAsyncService_SynchronousMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncAsyncServiceClient) AsynchronousMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AsyncResponse)
	err := c.cc.Invoke(ctx, SyncAsyncService_AsynchronousMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncAsyncServiceServer is the server API for SyncAsyncService service.
// All implementations must embed UnimplementedSyncAsyncServiceServer
// for forward compatibility.
//
// Сервіс для методів синхронної та асинхронної взаємодії
type SyncAsyncServiceServer interface {
	// Синхронний метод запит-відповідь
	SynchronousMethod(context.Context, *Request) (*Response, error)
	// Асинхронний метод запит-відповідь (емуляція асинхронності)
	AsynchronousMethod(context.Context, *Request) (*AsyncResponse, error)
	mustEmbedUnimplementedSyncAsyncServiceServer()
}

// UnimplementedSyncAsyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncAsyncServiceServer struct{}

func (UnimplementedSyncAsyncServiceServer) SynchronousMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronousMethod not implemented")
}
func (UnimplementedSyncAsyncServiceServer) AsynchronousMethod(context.Context, *Request) (*AsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsynchronousMethod not implemented")
}
func (UnimplementedSyncAsyncServiceServer) mustEmbedUnimplementedSyncAsyncServiceServer() {}
func (UnimplementedSyncAsyncServiceServer) testEmbeddedByValue()                          {}

// UnsafeSyncAsyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncAsyncServiceServer will
// result in compilation errors.
type UnsafeSyncAsyncServiceServer interface {
	mustEmbedUnimplementedSyncAsyncServiceServer()
}

func RegisterSyncAsyncServiceServer(s grpc.ServiceRegistrar, srv SyncAsyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedSyncAsyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SyncAsyncService_ServiceDesc, srv)
}

func _SyncAsyncService_SynchronousMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncAsyncServiceServer).SynchronousMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncAsyncService_SynchronousMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncAsyncServiceServer).SynchronousMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncAsyncService_AsynchronousMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncAsyncServiceServer).AsynchronousMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncAsyncService_AsynchronousMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncAsyncServiceServer).AsynchronousMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncAsyncService_ServiceDesc is the grpc.ServiceDesc for SyncAsyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncAsyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.SyncAsyncService",
	HandlerType: (*SyncAsyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SynchronousMethod",
			Handler:    _SyncAsyncService_SynchronousMethod_Handler,
		},
		{
			MethodName: "AsynchronousMethod",
			Handler:    _SyncAsyncService_AsynchronousMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction_methods.proto",
}

const (
	PubSubService_Publish_FullMethodName   = "/interaction.PubSubService/Publish"
	PubSubService_Subscribe_FullMethodName = "/interaction.PubSubService/Subscribe"
)

// PubSubServiceClient is the client API for PubSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервіс для методів публікації-підписки
type PubSubServiceClient interface {
	// Метод публікації повідомлення
	Publish(ctx context.Context, in *PubSubMessage, opts ...grpc.CallOption) (*PubSubAck, error)
	// Метод підписки на повідомлення (серверний стрімінг)
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PubSubMessage], error)
}

type pubSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubSubServiceClient(cc grpc.ClientConnInterface) PubSubServiceClient {
	return &pubSubServiceClient{cc}
}

func (c *pubSubServiceClient) Publish(ctx context.Context, in *PubSubMessage, opts ...grpc.CallOption) (*PubSubAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PubSubAck)
	err := c.cc.Invoke(ctx, PubSubService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubServiceClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PubSubMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PubSubService_ServiceDesc.Streams[0], PubSubService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscriptionRequest, PubSubMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PubSubService_SubscribeClient = grpc.ServerStreamingClient[PubSubMessage]

// PubSubServiceServer is the server API for PubSubService service.
// All implementations must embed UnimplementedPubSubServiceServer
// for forward compatibility.
//
// Сервіс для методів публікації-підписки
type PubSubServiceServer interface {
	// Метод публікації повідомлення
	Publish(context.Context, *PubSubMessage) (*PubSubAck, error)
	// Метод підписки на повідомлення (серверний стрімінг)
	Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[PubSubMessage]) error
	mustEmbedUnimplementedPubSubServiceServer()
}

// UnimplementedPubSubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPubSubServiceServer struct{}

func (UnimplementedPubSubServiceServer) Publish(context.Context, *PubSubMessage) (*PubSubAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPubSubServiceServer) Subscribe(*SubscriptionRequest, grpc.ServerStreamingServer[PubSubMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPubSubServiceServer) mustEmbedUnimplementedPubSubServiceServer() {}
func (UnimplementedPubSubServiceServer) testEmbeddedByValue()                       {}

// UnsafePubSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubSubServiceServer will
// result in compilation errors.
type UnsafePubSubServiceServer interface {
	mustEmbedUnimplementedPubSubServiceServer()
}

func RegisterPubSubServiceServer(s grpc.ServiceRegistrar, srv PubSubServiceServer) {
	// If the following call pancis, it indicates UnimplementedPubSubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PubSubService_ServiceDesc, srv)
}

func _PubSubService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubSubMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PubSubService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServiceServer).Publish(ctx, req.(*PubSubMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscriptionRequest, PubSubMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PubSubService_SubscribeServer = grpc.ServerStreamingServer[PubSubMessage]

// PubSubService_ServiceDesc is the grpc.ServiceDesc for PubSubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubSubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.PubSubService",
	HandlerType: (*PubSubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSubService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSubService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interaction_methods.proto",
}

const (
	BrokerService_SendToBroker_FullMethodName      = "/interaction.BrokerService/SendToBroker"
	BrokerService_ReceiveFromBroker_FullMethodName = "/interaction.BrokerService/ReceiveFromBroker"
)

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервіс для взаємодії через брокери повідомлень
type BrokerServiceClient interface {
	// Метод відправки повідомлення в брокер
	SendToBroker(ctx context.Context, in *BrokerMessage, opts ...grpc.CallOption) (*BrokerAck, error)
	// Метод отримання повідомлення з брокера (серверний стрімінг)
	ReceiveFromBroker(ctx context.Context, in *BrokerSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BrokerMessage], error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) SendToBroker(ctx context.Context, in *BrokerMessage, opts ...grpc.CallOption) (*BrokerAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrokerAck)
	err := c.cc.Invoke(ctx, BrokerService_SendToBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) ReceiveFromBroker(ctx context.Context, in *BrokerSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BrokerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[0], BrokerService_ReceiveFromBroker_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BrokerSubscription, BrokerMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_ReceiveFromBrokerClient = grpc.ServerStreamingClient[BrokerMessage]

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility.
//
// Сервіс для взаємодії через брокери повідомлень
type BrokerServiceServer interface {
	// Метод відправки повідомлення в брокер
	SendToBroker(context.Context, *BrokerMessage) (*BrokerAck, error)
	// Метод отримання повідомлення з брокера (серверний стрімінг)
	ReceiveFromBroker(*BrokerSubscription, grpc.ServerStreamingServer[BrokerMessage]) error
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerServiceServer struct{}

func (UnimplementedBrokerServiceServer) SendToBroker(context.Context, *BrokerMessage) (*BrokerAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToBroker not implemented")
}
func (UnimplementedBrokerServiceServer) ReceiveFromBroker(*BrokerSubscription, grpc.ServerStreamingServer[BrokerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveFromBroker not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}
func (UnimplementedBrokerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrokerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_SendToBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).SendToBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_SendToBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).SendToBroker(ctx, req.(*BrokerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_ReceiveFromBroker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BrokerSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServiceServer).ReceiveFromBroker(m, &grpc.GenericServerStream[BrokerSubscription, BrokerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_ReceiveFromBrokerServer = grpc.ServerStreamingServer[BrokerMessage]

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToBroker",
			Handler:    _BrokerService_SendToBroker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveFromBroker",
			Handler:       _BrokerService_ReceiveFromBroker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interaction_methods.proto",
}
